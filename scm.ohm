scm {
 Main = Item+
  Item =
    | "(" sym<"define"> "(" FunctionName Param_rec ")" Body_rec ")" -- function
    | "(" sym<"define"> Atom Body_rec ")" -- var
    | comment -- comment
    | "(" FunctionName TopLevelCallArg_rec ")" -- toplevelcall

  Body_rec =
    | Statement Body_rec? -- statement
    | Expr Body_rec? -- expr

  Statement =
    // these create a new _temps environment
    | "(" sym<"cond"> IfThenClause_rec ElseClause? ")" -- cond
    | "(" sym<"let"> "(" LetBinding_rec ")" Expr ")" -- let
    | "(" sym<"set!"> Expr ")" -- set

  Expr =
    | "(" sym<"null?"> Expr ")" -- nullp
    | "(" sym<"string=?"> Expr Expr ")" -- stringeq
    | "(" sym<"pair?"> Expr ")" -- pair
    | "(" sym<"quote"> QuotedContents_rec ")" -- quote
    | "(" Question Expr ")" -- lvar
    | "(" sym<"+"> PlusArg_rec ")" -- plus
    | "(" sym<"and"> AndArg_rec ")" -- and
    | "(" List CallArg_rec ")" -- reject_anonfuncall
    | "(" Atom CallArg_rec ")" -- funcall
    | number -- number
    | string -- string
    | Atom -- atom
    
  Atom = "❲" upto<"❳">
  bracket = "❲" | "❳"
  sq = "'"

  Question = "\"?\""

  sym<s> = "❲" s "❳"
  comment = "⌈" upto<"⌉">
  number = digit+
  string = bq upto<eq>
  bq = "“"
  eq = "”"

  upto<x> = (~x any)* x

  space += comment

  FunctionName = Atom
  Param = Atom
  Arg = Expr

  // lists inside of quote are not exprs, they are list constructors
  QuotedContents_rec =
    | "(" ")" -- nil
    | "(" QuotedContents_rec ")" -- list
    | number -- number
    | string -- string
    | Atom -- atom




  PlusArg_rec = Body_rec PlusArg_rec?
  AndArg_rec = Body_rec AndArg_rec?
  CallArg_rec = Body_rec CallArg_rec?
  TopLevelCallArg_rec = Body_rec TopLevelCallArg_rec?
  Param_rec = Atom Param_rec?
  IfThenClause_rec = "(" ~sym<"else"> Expr Body_rec ")" IfThenClause_rec?
  ElseClause = "(" sym<"else"> Body_rec ")"
  LetBinding_rec = "(" Atom Body_rec ")" LetBinding_rec?

  
}
