scm {
  Main [Item+] = ‛«Item»’
  Item_function [lb _def lb2 functionname args* rb2 body rb] = ‛\n❲def❳ «functionname» («args»):⤷\n_temps = []\n_newtemp (_temps)⤷\n«body»⤶\nreturn _temps.pop ()⤶\n’
  Item_var [lb _def name body rb] = ‛\n«name» = «body»’
  Item_comment [x] = ‛«x»’
  Item_number [x] = ‛«x»’
  Item_string [x] = ‛«x»’
  Item_toplevel [x] = ‛«x»’

  List [lb xs+ rb] = ‛«lb»«xs»«rb»’
  ListOrAtom_cond [lb _cond ifthenclause+ elseclause? rb] = ‛ _newtemp (_temps)⤷\nif False:⤷\npass⤶«ifthenclause»«elseclause»⤶\n_mergetemps (_temps)’
  ListOrAtom_nullp [lb _null arg rb] = ‛ isinstance(«arg», list) ’
  ListOrAtom_stringeq [lb _stringeq arg1 arg2 rb] = ‛ («arg1» == «arg2») ’
  ListOrAtom_let [lb _let lb2 letbinding+ rb2 body rb] = ‛_newtemp (_temps)⤷\n«letbinding»\n«body»⤶\n_mergetemps (_temps)’
  ListOrAtom_pair [lb _pair arg rb] = ‛ isinstance («arg», list) ’
  ListOrAtom_save [v] = ‛«v»’

  SaveListOrAtom_plus [lb name arg* rb] = ‛ _save (_temps, plus («arg»)) ’
  SaveListOrAtom_anonfuncall [lb anon arg* rb] = ‛ _save (_temps, «anon» («arg»)) ’
  SaveListOrAtom_funcall [lb name arg* rb] = ‛ _save (_temps, «name» («arg»)) ’
  SaveListOrAtom_lvar [lb _q e rb] =  ‛ _save (_temps, lvar («e»)) ’
  SaveListOrAtom_quote [lb _quote contents+ rb] = ‛_save (_temps, «contents»)’
  SaveListOrAtom_list [x] = ‛_save (_temps, «x»)’
  SaveListOrAtom_number [x] = ‛_save (_temps, «x»)’
  SaveListOrAtom_string [x] = ‛_save (_temps, «x»)’
  SaveListOrAtom_atom [x] = ‛_save (_temps, «x»)’

  Atom [lb uptorb] = ‛«lb»«uptorb»’
  bracket [c] = ‛«c»’
  sq [c] = ‛«c»’

  Question [q] = ‛«q»’
  LetBinding [lb atom val rb] = ‛\n«atom» = «val»’
  Expr [listOrAtom] = ‛ «listOrAtom»’
  Body [re] = ‛«re»’
  
  sym [lb s rb] = ‛«lb»«s»«rb»’
  comment [lb uptorb] = ‛«lb»«uptorb»’
  number [ds+] = ‛«ds»’
  string [dq uptodq] = ‛«dq»«uptodq»’
  bq [c] = ‛«c»’
  eq [c] = ‛«c»’
  upto [cs* right] = ‛«cs»«right»’

  FunctionName [n] = ‛«n»’
  Param [n] = ‛«n», ’
  Arg [n] = ‛«n», ’

  IfThenClause [lb test e rb] = ‛\nelif «test»:⤷\n«e»⤶’
  ElseClause [lb _else e rb] = ‛\nelse:⤷\n«e»⤶’

  QuotedContents_nil [lb rb] = ‛[],’
  QuotedContents_list [lb contents+ rb] = ‛[«contents»],’
  QuotedContents_number [n] = ‛«n»,’
  QuotedContents_string [s] = ‛«s»,’
  QuotedContents_atom [a] =  ‛"«a»",’

}
